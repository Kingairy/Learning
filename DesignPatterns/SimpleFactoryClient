package DesignPatterns;

public class SimpleFactoryClient {
	/***
	 * SimpleFacotry Pattern
	 * 
	 * @author wangqizheng
	 *
	 */
	interface IProduct {
		public void operation();
	}

	class ProductA implements IProduct {
		public void operation() {
			System.out.println("Create ProductA");
		}
	}

	class ProductB implements IProduct {
		public void operation() {
			System.out.println("Create ProductB");
		}
	}

	class SimpleFactory {
		public IProduct createProduct(String type) {
			if ("a".equals(type))
				return new ProductA();
			else if ("b".equals(type))
				return new ProductB();
			else return null;
		}
	}

	public static void main(String[] args) {
		SimpleFactory factory = new SimpleFactoryClient().new SimpleFactory();
		IProduct product = factory.createProduct("a");
		product.operation();
		product = factory.createProduct("b");
		product.operation();
	}
}
